# apiVersion: This specifies the API version for the Kubernetes object being defined.
# In this case, 'v1' is the API version for the Service object, which is a part of the Kubernetes Core API.
# The 'v1' API version is the most common and stable version for most Kubernetes resources.
apiVersion: v1

# kind: This defines the type of Kubernetes object being created.
# A 'Service' object is used to expose a set of pods to the network, providing a stable network identity and load balancing.
# Services are a crucial component of Kubernetes, as they allow pods to communicate with each other and with external services.
kind: Service

# metadata: This section contains metadata about the Service object, such as its name and labels.
# Metadata is used to identify and categorize Kubernetes objects, making it easier to manage and query them.
metadata:
  # name: This is the unique name for the Service object, which can be used to reference it.
  # In this case, the name 'user' will be used to identify the Service object.
  # Service names must be unique within a namespace, and must conform to DNS label standards.
  name: user
  # labels: These are key-value pairs that help identify and categorize the Service object.
  # Labels are used to filter and select Kubernetes objects, making it easier to manage and query them.
  # In this case, the label 'service: user' can be used to select or filter the Service object.
  labels:
    service: user

# spec: This section contains the specification for the Service object, including its configuration and behavior.
# The spec section is used to define the desired state of the Service object, and is used by Kubernetes to create and manage the object.
spec:
  # ports: This section defines the ports that the Service object will expose to the network.
  # Ports are used to allow traffic to flow into the Service object, and are a crucial component of Kubernetes networking.
  ports:
    # - name: This specifies the name of the port, which can be used to identify it.
    # In this case, the name 'http' will be used to identify the port.
    # Port names must be unique within a Service object, and must conform to DNS label standards.
    - name: http
      # port: This specifies the port number that the Service object will expose to the network.
      # In this case, the port number 8080 will be exposed.
      # Port numbers must be in the range 0-65535, and must not conflict with other ports in the same Service object.
      port: 8080
      # targetPort: This specifies the port number that the Service object will forward traffic to on the selected pods.
      # In this case, the target port is also 8080, which means that the Service object will forward traffic to the same port on the pods.
      # Target ports must be in the range 0-65535, and must not conflict with other target ports in the same Service object.
      targetPort: 8080

  # selector: This section defines the criteria for selecting pods that the Service object will target.
  # The selector is used to identify the pods that the Service object will forward traffic to, and is a crucial component of Kubernetes.
  selector:
    # service: This specifies the label key and value that the selector will match.
    # In this case, the selector will match pods with the label 'service: user'.
    # Label selectors are used to filter and select Kubernetes objects, making it easier to manage and query them.
    service: user
